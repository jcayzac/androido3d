//	Box.h
//	Copyright (C) 2008 Chris Pruett.		c_pruett@efn.org
//
//	FarClip Engine
//
//	Licensed under the Apache License, Version 2.0 (the "License");
//	you may not use this file except in compliance with the License.
//	You may obtain a copy of the License at
//
//			http://www.apache.org/licenses/LICENSE-2.0
//
//	Unless required by applicable law or agreed to in writing, software
//	distributed under the License is distributed on an "AS IS" BASIS,
//	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//	See the License for the specific language governing permissions and
//	limitations under the License.

#include "Vector3.h"

// simple AABB implementation

metaclass Box
{
		function Box(const Vector3& position, const Vector3& size) { public }
		function Box() { public }
		
		// sets position and clears history
		function void initializePosition(const Vector3& newPosition) { public }
		// sets position without modifying history
		function void setPosition(const Vector3& newPosition) { public }
		// maintains history
		function void moveTo(const Vector3& newPosition) { public }
		
		// sets size and clears history
		function void initializeSize(const Vector3& newSize) { public }
		// sets size without modifying history
		function void setSize(const Vector3& newSize) { public }
		// maintains size history
		function void growTo(const Vector3& newSize) { public } 
		
		function float getLeft() const { public }
		function float getRight() const { public }
		function float getTop() const { public }
		function float getBottom() const { public }
		
		function Vector3 getTopLeft() const { public } 
		function Vector3 getTopRight() const { public }  
		function Vector3 getBottomLeft() const { public } 
		function Vector3 getBottomRight() const { public } 

		function Vector3 getLastTopLeft() const { public } 
		function Vector3 getLastTopRight() const { public } 
		function Vector3 getLastBottomLeft() const { public } 
		function Vector3 getLastBottomRight() const { public } 
		
		// lower-left corner of the box
		field mPosition { type Vector3, private }
		field mSize { type Vector3, private }
		
		field mLastPosition { type Vector3, private }
		field mLastSize { type Vector3, private }
		
		get mPosition { public, by const reference }
		get mSize { public, by const reference }
		get mLastPosition { public, by const reference }
		get mLastSize { public, by const reference }
}


inline void Box::initializePosition(const Vector3& newPosition)
{
	mPosition = newPosition;
	mLastPosition = newPosition;
}

inline void Box::setPosition(const Vector3& newPosition)
{
	mPosition = newPosition;
}

inline void Box::moveTo(const Vector3& newPosition)
{
	mLastPosition = mPosition;
	mPosition = newPosition;
}

inline void Box::initializeSize(const Vector3& newSize)
{
	mSize = newSize;
	mLastSize = newSize;
}

inline void Box::setSize(const Vector3& newSize)
{
	mSize = newSize;
}

inline void Box::growTo(const Vector3& newSize)
{
	mLastSize = mSize;
	mSize = newSize;
}

inline float Box::getLeft() const
{
	float left = getPosition()[0];
	left -= getSize()[0] / 2.0f;
	return left;
}

inline float Box::getRight() const
{
	float right = getPosition()[0];
	right += getSize()[0] / 2.0f;
	return right;
}

inline float Box::getTop() const
{
	float top = getPosition()[1];
	top += getSize()[1] / 2.0f;
	return top;
}

inline float Box::getBottom() const
{
	float bottom = getPosition()[1];
	bottom -= getSize()[1] / 2.0f;
	return bottom;
}


inline Vector3 Box::getTopLeft() const
{
	Vector3 topLeft = getPosition();
	topLeft[0] -= getSize()[0] / 2.0f;
	topLeft[1] += getSize()[1] / 2.0f;

	return topLeft;
}


inline Vector3 Box::getTopRight() const
{
	Vector3 topRight = getPosition();
	topRight[0] += getSize()[0] / 2.0f;
	topRight[1] += getSize()[1] / 2.0f;

	return topRight;
}
	
inline Vector3 Box::getBottomLeft() const
{
	Vector3 bottomLeft = getPosition();
	bottomLeft[0] -= getSize()[0] / 2.0f;
	bottomLeft[1] -= getSize()[1] / 2.0f;

	return bottomLeft;
}

inline Vector3 Box::getBottomRight() const
{
	Vector3 bottomRight = getPosition();
	bottomRight[0] += getSize()[0] / 2.0f;
	bottomRight[1] -= getSize()[1] / 2.0f;
	return bottomRight;
}

inline Vector3 Box::getLastTopLeft() const
{
	return Box(mLastPosition, mLastSize).getTopLeft();
}

inline Vector3 Box::getLastTopRight() const
{
	return Box(mLastPosition, mLastSize).getTopRight();
}

inline Vector3 Box::getLastBottomLeft() const
{
	return Box(mLastPosition, mLastSize).getBottomLeft();
}

inline Vector3 Box::getLastBottomRight() const
{
	return Box(mLastPosition, mLastSize).getBottomRight();
}