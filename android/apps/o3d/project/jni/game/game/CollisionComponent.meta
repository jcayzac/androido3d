//	CollisionComponent.h
//	Copyright (C) 2008 Chris Pruett.		c_pruett@efn.org
//
//	FarClip Engine
//
//	Licensed under the Apache License, Version 2.0 (the "License");
//	you may not use this file except in compliance with the License.
//	You may obtain a copy of the License at
//
//			http://www.apache.org/licenses/LICENSE-2.0
//
//	Unless required by applicable law or agreed to in writing, software
//	distributed under the License is distributed on an "AS IS" BASIS,
//	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//	See the License for the specific language governing permissions and
//	limitations under the License.


#include "GameComponent.h"

#include "Box.h"
#include "Vector3.h"

metaclass CollisionComponent
{
	base GameComponent
	
	function void update(const float timeDelta, GameObject* pParentObject) { public }
	function virtual bool runsInPhase(const GameObjectSystem::GameObjectUpdatePhase phase)	{ public } 

	function bool findSurface(const Box& box, const Vector3& point, const Vector3& direction, const float tolerance) { protected }

	field mBounds { type Box, private }
	field mSurfaceProximityTolerance { type float, value 10.0f, private }
	// Toggles entity-entity snapping
	field mSolid { type bool, value true, private }
	// Toggles entity-entity testing
	field mOpposeEntities { type bool, value true, private }
	// Allows this object to be snapped as a result of entity collision
	field mCanBeSnapped { type bool, value true, private }
	
	get mBounds { public, by const reference }
	set mBounds { public, by const reference }
	get mSurfaceProximityTolerance { public }
	set mSurfaceProximityTolerance { public }
	get mSolid { public }
	set mSolid { public }
	get mOpposeEntities { public }
	set mOpposeEntities { public }
	get mCanBeSnapped { public }
	set mCanBeSnapped { public }
}

inline bool CollisionComponent::runsInPhase(const GameObjectSystem::GameObjectUpdatePhase phase)
{
	// all components default to the logic phase
	return phase == GameObjectSystem::PHASE_resolution;
}