//	CollisionPairSystem.meta
//	Copyright (C) 2008 Chris Pruett.		c_pruett@efn.org
//
//	FarClip Engine
//
//	Licensed under the Apache License, Version 2.0 (the "License");
//	you may not use this file except in compliance with the License.
//	You may obtain a copy of the License at
//
//			http://www.apache.org/licenses/LICENSE-2.0
//
//	Unless required by applicable law or agreed to in writing, software
//	distributed under the License is distributed on an "AS IS" BASIS,
//	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//	See the License for the specific language governing permissions and
//	limitations under the License.


#include "Array.h"
#include "KeyValueMap.h"
#include "LinkedList.h"
#include "ObjectHandle.h"
#include "System.h"
#include "Vector3.h"

class GameObject;

metaclass CollisionPairSystem
{
	base System
	
	enum GameObjectUpdatePhase
	{
		protected,
		value MAX_collisionPairs 256
	}
	
	metaclass CollisionRecord
	{
		public		// This class should be protected!  Fix bug in static serialization generator!
		field mObject1 { type int, value 0, private }
		field mObject2 { type int, value 0, private }
		field mIntersecting { type bool, value false, private }
		field mObject1OpposingNormal { type Vector3, value "Vector3::ZERO", private }
		field mObject2OpposingNormal { type Vector3, value "Vector3::ZERO", private }
		
		function int getOtherObject(const int thisObject) const { public }
		function Vector3 getObjectOpposingNormal(const int thisObject) const { public }
		function void setObjectOpposingNormal(const int thisObject, const Vector3& normal) { public }
		
		get mObject1 { public }
		set mObject1 { public }
		get mObject2 { public }
		set mObject2 { public }
		get mIntersecting { public }
		set mIntersecting { public }
		get mObject1OpposingNormal { public }
		set mObject1OpposingNormal { public }
		get mObject2OpposingNormal { public }
		set mObject2OpposingNormal { public }
	}
	
	function CollisionPairSystem() { public }
	
	function virtual void update(const float timeDelta, const UpdatePhase phase)	{ public } 
	function virtual bool runsInPhase(const UpdatePhase phase)	{ public } 

	// Takes an object and returns a list of objects intersecting with it.
	function bool findPairs(const GameObject* pObject, Array<CollisionRecord*>& intersectingObjectIDs) { public }
	function int findCollisionRecord(const int index, const LinkedList< ObjectHandle<CollisionRecord> >* list) { protected }
	
	field mPairs { type "KeyValueMap<int, ObjectHandle< LinkedList< ObjectHandle<CollisionPairSystem::CollisionRecord> > > >", private }
	get mPairs { by reference, protected }
}

inline int CollisionPairSystem::CollisionRecord::getOtherObject(const int thisObject) const
{
	int result = getObject1();
	if (thisObject == getObject1())
	{
		result = getObject2();
	}
	return result;
}

inline Vector3 CollisionPairSystem::CollisionRecord::getObjectOpposingNormal(const int thisObject) const
{
	Vector3 result = getObject1OpposingNormal();
	if (thisObject == getObject2())
	{
		result = getObject2OpposingNormal();
	}
	
	return result;
}


inline void CollisionPairSystem::CollisionRecord::setObjectOpposingNormal(const int thisObject, const Vector3& normal)
{
	if (thisObject == getObject1())
	{
		setObject1OpposingNormal(normal);
	}
	else
	{
		setObject2OpposingNormal(normal);
	}
}

inline bool CollisionPairSystem::runsInPhase(const UpdatePhase phase)
{
	return phase == PHASE_collision;
}