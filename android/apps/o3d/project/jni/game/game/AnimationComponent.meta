//	AnimationComponent.h
//	Copyright (C) 2008 Chris Pruett.		c_pruett@efn.org
//
//	FarClip Engine
//
//	Licensed under the Apache License, Version 2.0 (the "License");
//	you may not use this file except in compliance with the License.
//	You may obtain a copy of the License at
//
//			http://www.apache.org/licenses/LICENSE-2.0
//
//	Unless required by applicable law or agreed to in writing, software
//	distributed under the License is distributed on an "AS IS" BASIS,
//	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//	See the License for the specific language governing permissions and
//	limitations under the License.

#include "GameComponent.h"
#include "ObjectHandle.h"
#include "RenderableObject.h"
#include "Vector3.h"

namespace o3d_utils {
  class Scene;
}


metaclass AnimationComponent
{
	base GameComponent
	
	metaclass AnimationRecord
	{
	  public
	  field mFramesPerSecond { type float, value 0.0f, private }
	  field mStartFrame { type int, value 0, private }
	  field mEndFrame { type int, value 0, private }
	  field mLooping { type bool, value false, private }
	  
	  function float getAnimationTime(float startTime, float currentTime) const { public }
	  function int getFrameCount() const { public }
	  
	  get mFramesPerSecond { public }
	  set mFramesPerSecond { public }
	  get mStartFrame { public }
	  set mStartFrame { public }
	  get mEndFrame { public }
	  set mEndFrame { public }
	  get mLooping { public }
	  set mLooping { public }

	}
	
	function void update(const float timeDelta, GameObject* pParentObject) { public }
	function virtual bool runsInPhase(const GameObjectSystem::GameObjectUpdatePhase phase)	{ public } 
	
	function int addAnimation(AnimationRecord* animation) { public }
	function void playAnimation(int animation) { public }
	
	field mSceneRoot { type o3d_utils::Scene*, value NULL, private }
	array mAnimations { type AnimationRecord*, length dynamic, ref count, private }
	field mCurrentAnimation { type int, value 0, private }
	field mCurrentAnimationStartTime { type float, value 0, private }
	
	get mSceneRoot { public }
	set mSceneRoot { public }
	
	get mAnimations { protected, by pointer }
	
	get mCurrentAnimation { protected }
	set mCurrentAnimation { protected }
	get mCurrentAnimationStartTime { protected }
	set mCurrentAnimationStartTime { protected }
}

inline int AnimationComponent::AnimationRecord::getFrameCount() const
{
  return getEndFrame() - getStartFrame();
}

inline bool AnimationComponent::runsInPhase(const GameObjectSystem::GameObjectUpdatePhase phase)
{
	return phase == GameObjectSystem::PHASE_postMovement;
}

