//	PhysicsComponent.h
//	Copyright (C) 2008 Chris Pruett.		c_pruett@efn.org
//
//	FarClip Engine
//
//	Licensed under the Apache License, Version 2.0 (the "License");
//	you may not use this file except in compliance with the License.
//	You may obtain a copy of the License at
//
//			http://www.apache.org/licenses/LICENSE-2.0
//
//	Unless required by applicable law or agreed to in writing, software
//	distributed under the License is distributed on an "AS IS" BASIS,
//	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//	See the License for the specific language governing permissions and
//	limitations under the License.


#include "GameComponent.h"

#include "Box.h"
#include "Vector3.h"

metaclass PhysicsComponent
{
	base GameComponent
	
	function void update(const float timeDelta, GameObject* pParentObject) { public }
	function virtual bool runsInPhase(const GameObjectSystem::GameObjectUpdatePhase phase)	{ public } 

	function Vector3 resolveCollision(Vector3 velocity, Vector3 impulse, Vector3 opposingNormal) { protected }
	function Vector3 resolveCollision(Vector3 velocity, Vector3 impulse, Vector3 opposingNormal, 
		const float otherMass, const Vector3& otherVelocity, const Vector3& otherImpulse, const float otherBounciness) { protected }
		
	field mMass { type float, value 1.0f, private }
	field mStaticFrictionCoeffecient { type float, value 0.5f, private }
	field mDynamicFrictionCoeffecient { type float, value 0.1f, private }
	// mBounciness = coeffecient of restitution.	1.0 = super bouncy, 0.0 = no bounce.
	field mBounciness { type float, value 0.0f, private }
	field mInertia { type float, value 0.1f, private }
	
	get mMass { public }
	set mMass { public }
	get mStaticFrictionCoeffecient { public }
	set mStaticFrictionCoeffecient { public }
	get mDynamicFrictionCoeffecient { public }
	set mDynamicFrictionCoeffecient { public }
	get mBounciness { public }
	set mBounciness { public }
	get mInertia { public }
	set mInertia { public }
}

inline bool PhysicsComponent::runsInPhase(const GameObjectSystem::GameObjectUpdatePhase phase)
{
	// all components default to the logic phase
	return phase == GameObjectSystem::PHASE_postMovement;
}
