//	Renderer.meta
//	Copyright (C) 2008 Chris Pruett.		c_pruett@efn.org
//
//	FarClip Engine
//
//	Licensed under the Apache License, Version 2.0 (the "License");
//	you may not use this file except in compliance with the License.
//	You may obtain a copy of the License at
//
//			http://www.apache.org/licenses/LICENSE-2.0
//
//	Unless required by applicable law or agreed to in writing, software
//	distributed under the License is distributed on an "AS IS" BASIS,
//	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//	See the License for the specific language governing permissions and
//	limitations under the License.

#include "KeyValueMap.h"
#include "ObjectHandle.h"
#include "RenderableObject.h"
#include "System.h"
#include "Vector3.h"

struct DrawRecord
{
	DrawRecord() : mObject(NULL) { };
	ObjectHandle<RenderableObject> mObject;
	Vector3 mPosition;
};

metaclass Renderer
{
	base System
	
	enum
	{
		public,
		value MAX_objectsPerFrame 256
	}
	
	function Renderer() { public } 
	function void scheduleForDraw(RenderableObject* pObject, const Vector3& position, const int priority) { public }
	function virtual void update(const float timeDelta, const UpdatePhase phase) { public }
	// Returns true for PHASE_render.
	function virtual bool runsInPhase(const UpdatePhase phase) { public }
	
	field mInvalidRecord { type DrawRecord, private }
	field mObjectsToDraw { type "KeyValueMap<int, DrawRecord>", private }
	field mCameraPosition { type Vector3, private }
	field mViewportWidth { type float, value 0.0f, private }
	field mViewportHeight { type float, value 0.0f, private }
	
	
	get mCameraPosition { public, by const reference }
	set mCameraPosition { public, by const reference }
	
	get mViewportWidth { public }
	set mViewportWidth { public }
	
	get mViewportHeight { public }
	set mViewportHeight { public }
}

inline bool Renderer::runsInPhase(const System::UpdatePhase phase)
{
	return phase == System::PHASE_render;
}
