//	ProfileSystem.meta
//	Copyright (C) 2008 Chris Pruett.		c_pruett@efn.org
//
//	FarClip Engine
//
//	Licensed under the Apache License, Version 2.0 (the "License");
//	you may not use this file except in compliance with the License.
//	You may obtain a copy of the License at
//
//			http://www.apache.org/licenses/LICENSE-2.0
//
//	Unless required by applicable law or agreed to in writing, software
//	distributed under the License is distributed on an "AS IS" BASIS,
//	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//	See the License for the specific language governing permissions and
//	limitations under the License.

#include "DataTable.h"
#include "LinkedList.h"
#include "System.h"

struct TimingRecord
{
	TimingRecord() : mTotalTime(0.0f), mLastStartTime(0.0f), mSampleCount(0), mChild(NULL), mSibling(NULL) {}
	double mTotalTime;
	double mLastStartTime;
	int mSampleCount;
	TimingRecord* mChild;	// This awkward tree structure is required because LinkedList<> and
	TimingRecord* mSibling; // Array<> don't have correct copy constructors!  Argh!
	char const * mName;
};

metaclass ProfileSystem
{
	base System
	
	function ProfileSystem() { public }
	
	function void startTracking(const char* label) { public }
	function void stopTracking() { public }
	
	// returns time in milliseconds.
	function float getAverageDuration(const char* label) { public }
	function void printResults(const float currentGameTime) { public }
	function void reset() { public }

	function virtual void update(const float timeDelta, const UpdatePhase phase)	{ public } 
	function virtual bool runsInPhase(const UpdatePhase phase)	{ public } 

	enum
	{
		protected,
		value PROFILE_maxSimultaniousRecords 64
	}
	
	function float computeAverageDuration(const TimingRecord* record) { protected }
	function void printRecordTree(const TimingRecord* record, const float sampleDuration, const float parentDuration, int level) { protected }

	// The amount of time in seconds to accumulate tracking information for averaging
	field mTrackingInterval { type float, value 3.0f, private }
	field mLastIntervalStart { type float, value 0.0f, private }
	field mIntervalSamples { type int, value 0, private }

	array mTimingRecordPool { type TimingRecord, length dynamic, private }
	field mTimingTable { type "DataTable<TimingRecord*>", private }
	array mActiveStack { type TimingRecord*, length dynamic, private } 
	array mRootRecords { type TimingRecord*, length dynamic, private } 
	
	get mTrackingInterval { public }
	set mTrackingInterval { public }
	
	get mLastIntervalStart { protected }
	set mLastIntervalStart { protected }
	
	get mIntervalSamples { protected }
	set mIntervalSamples { protected }
	
	get mTimingRecordPool { protected, by reference }
	get mTimingTable { protected, by reference }
	get mActiveStack { protected, by reference }
	get mRootRecords { protected, by reference }
}

inline bool ProfileSystem::runsInPhase(const UpdatePhase phase)
{
	return phase == PHASE_debug;
}