//	System.meta
//	Copyright (C) 2008 Chris Pruett.		c_pruett@efn.org
//
//	FarClip Engine
//
//	Licensed under the Apache License, Version 2.0 (the "License");
//	you may not use this file except in compliance with the License.
//	You may obtain a copy of the License at
//
//			http://www.apache.org/licenses/LICENSE-2.0
//
//	Unless required by applicable law or agreed to in writing, software
//	distributed under the License is distributed on an "AS IS" BASIS,
//	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//	See the License for the specific language governing permissions and
//	limitations under the License.


metaclass System
{
	abstract
	
	// Phases of a single frame that a system may run within.
	// Note that a system can run in multiple phases (which means that it is invoked more than
	// once per frame).
	// PHASE_hardware		- Input polling, etc.
	// PHASE_logic			- Game code
	// PHASE_movement		- Update position
	// PHASE_resolution		- Collide
	// PHASE_postMovement	- Position is fixed for this frame.  Physics.
	// PHASE_render			- Draw
	// PHASE_debug			- Debug stuff, profiling

	// TODO: fix parser so that inline comments in enums is supported.
	enum UpdatePhase
	{
		public,
		value PHASE_start 0,
		value PHASE_hardware PHASE_start,	
		value PHASE_logic,		
		value PHASE_movement,
		value PHASE_collision,
		value PHASE_resolution,
		value PHASE_postMovement,
		value PHASE_render,
		value PHASE_debug,
		value PHASE_count
	}
	
	function virtual void startup() { public }
	function virtual void shutdown() { public }
	function virtual void update(const float timeDelta, const UpdatePhase phase) { public }
	// Returns true for PHASE_logic by default.
	function virtual bool runsInPhase(const UpdatePhase phase) { public }
	
	field mScheduleForUpdate { type bool, value false, private }
	get mScheduleForUpdate { public }
}

inline void System::startup()
{
	// base class does nothing
}

inline void System::shutdown()
{
	// base class does nothing
}

inline void System::update(const float timeDelta, const UpdatePhase phase)
{
	// base class does nothing
}

inline bool System::runsInPhase(const UpdatePhase phase)
{
	// By default, all systems run in the "logic" phase.
	return phase == PHASE_logic;
}